plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


repositories {
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url = 'https://maven.nucleoid.xyz' }
    maven { url = "https://api.modrinth.com/maven/" }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Infinituum Mod Resources"
        url = "https://raw.githubusercontent.com/Infinituum17/ModResources/main/maven/"
    }
    maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven { url = "https://api.modrinth.com/maven" }
    maven {
        name "opencollabRepositoryMavenReleases"
        url "https://repo.opencollab.dev/maven-releases"
    }
    maven {
        name "opencollabRepositoryMavenSnapshots"
        url "https://repo.opencollab.dev/maven-snapshots"
    }
    maven { url = "https://repo.opencollab.dev/main/" }
    maven { url = "https://maven.mohistmc.com/" }
    maven { url = "https://maven.architectury.dev/" }
    maven { url = "https://cursemaven.com" }
    maven { url "https://maven.tomalbrc.de" }
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
    mavenLocal()
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "net.minecraft:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation("eu.pb4:polymer-core:[${polymer_version}]")
    modImplementation("eu.pb4:polymer-blocks:[${polymer_version}]")
    modImplementation("eu.pb4:polymer-resource-pack:[${polymer_version}]")
    modImplementation("eu.pb4:polymer-resource-pack-extras:[${polymer_version}]")
    modImplementation("eu.pb4:polymer-virtual-entity:[${polymer_version}]")
    modImplementation("eu.pb4:polymer-autohost:${polymer_version}")
    modImplementation("eu.pb4:polymer-networking:[${polymer_version}]")

    modImplementation include("eu.pb4:factorytools:[${factorytools_version}]")
    modImplementation include("eu.pb4:sgui:[${sgui_version}]")
    modImplementation include("xyz.nucleoid:server-translations-api:2.5.1+1.21.5")
    modImplementation include("maven.modrinth:midnightlib:${midnightlib_version}")

    modImplementation include("de.tomalbrc:blockbench-import-library:${project.bil_version}")
    modImplementation include("eu.pb4:map-canvas-api:${project.mapcanvas_version}")

    modImplementation files('libs/resourceconfigapi-fabric-1.21.7-3.7.3.jar')
    modImplementation files('libs/eiv-fabric-2.5.5-bpv+1.21.7.jar')

    modCompileOnly files('libs/polydex2eiv-1.0.9.jar')
    modCompileOnly files('libs/PolyMc-5.7.0-rev.6a41cb5-dirty+1.21.7.jar')
    modCompileOnly files('libs/borukva-food-0.1.14+1.21.7.jar')
    modCompileOnly files('libs/borukva-food-exotic-3.10.0+1.21.7.jar')
    modCompileOnly files('libs/FarmersDelight-1.21.7-3.2.4+refabricated.jar')
    modCompileOnly files('libs/farmers-delight-polymer-patch-3.2.3.0+1.21.6.jar')
    modCompileOnly files('libs/Fishing-101-1.7.1_experimental.jar')
    modCompileOnly files('libs/go-fish-1.8.0+1.21.6.jar')

    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

    compileOnly files('libs/geyser-api-2.7.0-SNAPSHOT.jar')
    compileOnly files('libs/geyser-base-api-1.0.1.jar')
    compileOnly files('libs/geyser-cumulus-1.1.1.jar')
    compileOnly files('libs/geyser-events-1.1-SNAPSHOT.jar')
//    compileOnly('org.geysermc.geyser:api:2.7.0-SNAPSHOT')

    compileOnly 'org.projectlombok:lombok:1.18.34'
    modCompileOnly 'maven.modrinth:polydex:1.6.0+1.21.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    implementation include('com.mohistmc:dynamicenum:0.3')
    implementation include('org.reflections:reflections:0.10.2')

    compileOnly 'com.google.auto.value:auto-value:1.10.4'
    annotationProcessor 'com.google.auto.value:auto-value:1.10.4'
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

loom {
    accessWidenerPath = file("src/main/resources/reverie_dreams.accesswidener")
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }
    from("CREDIT") {
        rename { "CREDIT" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

afterEvaluate {
    downloadAssets {
        downloadThreads = 4
    }
    configurations.runtimeClasspath.forEach { file ->
        if (file.name.startsWith("sponge-mixin")) {
            tasks.named("runClient", JavaExec) {
                jvmArgs("-javaagent:${file.absolutePath}")
            }
        }
    }
}
